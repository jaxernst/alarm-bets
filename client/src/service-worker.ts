/// <reference lib="webworker" />
import { build, files } from '$service-worker';
import { deviceHash } from './lib/util';

declare const worker: ServiceWorkerGlobalScope;

interface PushSubscriptionChangeEvent extends ExtendableEvent {
	readonly newSubscription?: PushSubscription;
	readonly oldSubscription?: PushSubscription;
}

const version = 6;

const STATIC_CACHE_NAME = `cache${version}`;
const APP_CACHE_NAME = `offline${version}`;

// hard-coded list of app routes we want to preemptively cache
const routes = ['/'];

// hard-coded list of other assets necessary for page load outside our domain
const customAssets = [
	'https://fonts.googleapis.com/css2?family=Jura:wght@400;700&display=swap',
	'https://fonts.googleapis.com/css2?family=Jura&display=swap'
];

// `build` is an array of all the files generated by the bundler,
// `files` is an array of everything in the `static` directory
// `version` is the current version of the app

const addDomain = (assets: string[]) => assets.map((f) => worker.location.origin + f);

// we filter the files because we don't want to cache logos for iOS
// (they're big and largely unused)
// also, we add the domain to our assets, so we can differentiate routes of our
// app from those of other apps that we cache
const ourAssets = addDomain([
	...files.filter((f) => !/\/icons\/(apple.*?|original.png)/.test(f)),
	...build,
	...routes
]);

const toCache = [...ourAssets, ...customAssets];
const staticAssets = new Set(toCache);

worker.addEventListener('install', (event) => {
	console.log('installing service worker');
	event.waitUntil(
		caches
			.open(STATIC_CACHE_NAME)
			.then((cache) => {
				return cache.addAll(toCache);
			})
			.then(() => {
				worker.skipWaiting();
			})
	);
});

worker.addEventListener('activate', (event) => {
	console.log('activating service worker');
	event.waitUntil(
		caches.keys().then(async (keys) => {
			// delete old caches
			for (const key of keys) {
				if (key !== STATIC_CACHE_NAME && key !== APP_CACHE_NAME) {
					await caches.delete(key);
				}
			}

			worker.clients.claim();
		})
	);
});

/**
 * Fetch the asset from the network and store it in the cache.
 * Fall back to the cache if the user is offline.
 */
async function fetchAndCache(request: Request) {
	const cache = await caches.open(APP_CACHE_NAME);

	try {
		const response = await fetch(request);
		cache.put(request, response.clone());
		return response;
	} catch (err) {
		const response = await cache.match(request);
		if (response) {
			return response;
		}

		throw err;
	}
}

worker.addEventListener('fetch', (event) => {
	if (event.request.method !== 'GET' || event.request.headers.has('range')) {
		return;
	}

	const url = new URL(event.request.url);

	// don't try to handle e.g. data: URIs
	const isHttp = url.protocol.startsWith('http');
	const isDevServerRequest =
		url.hostname === worker.location.hostname && url.port !== worker.location.port;
	const isStaticAsset = staticAssets.has(url.href);
	const skipBecauseUncached = event.request.cache === 'only-if-cached' && !isStaticAsset;

	if (isHttp && !isDevServerRequest && !skipBecauseUncached) {
		event.respondWith(
			(async () => {
				// always serve static files and bundler-generated assets from cache.
				// if your application has other URLs with data that will never change,
				// set this variable to true for them, and they will only be fetched once.
				const cachedAsset = isStaticAsset && (await caches.match(event.request));

				return cachedAsset || fetchAndCache(event.request);
			})()
		);
	}
});

/** Push Notifications  **/

worker.addEventListener('push', (event) => {
	console.log('Push event received');
	const data = event.data?.json();

	const title = data.title || 'Push Notification';

	const options = {
		body: data.body,
		icon: './sac_logo.svg',
		badge: data.badge
	};

	event.waitUntil(worker.registration.showNotification(title, options));
});

const handlePushRenew = async () => {
	const newSubscription = await worker.registration.pushManager.getSubscription();
	await fetch(`api/_/notifications/${await deviceHash()}/update`, {
		method: 'POST',
		body: JSON.stringify(newSubscription),
		headers: {
			'content-type': 'application/json'
		}
	});
};

worker.addEventListener('pushsubscriptionchange' as any, (event: PushSubscriptionChangeEvent) => {
	event.waitUntil(handlePushRenew());
});
